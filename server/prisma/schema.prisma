generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

model User {
  id String @id @default(uuid())

  email    String @unique
  password String

  username    String @unique
  displayName String @map("display_name")

  avatar      String?
  information String?

  telegramChatId String? @unique @map("telegram_chat_id")

  role UserRole @default(REGULAR)

  userSecurity UserSecurity?

  tokens      Token[]
  socialLinks SocialLink[]
  stream      Stream?
  messages    Message[]

  notifications        Notification[]
  notificationSettings NotificationSettings?

  followers  Follow[] @relation(name: "followers")
  followings Follow[] @relation(name: "followings")

  posts           Post[]
  comments        Comment[]
  likes           Like[]
  createdChats    PrivateChat[]    @relation("ChatCreator")
  receivedChats   PrivateChat[]    @relation("ChatRecipient")
  privateMessages PrivateMessage[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model UserSecurity {
  id String @id @default(uuid())

  isEmailVerified Boolean @default(false) @map("is_email_verified")
  isTwoFAEnabled  Boolean @default(false) @map("is_two_fa_enabled")
  twoFASecret     String? @map("two_fa_secret")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user_securities")
}

model SocialLink {
  id String @id @default(uuid())

  title    String
  url      String
  position Int

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @map("user_id")

  @@map("social_links")
}

model Stream {
  id String @id @default(uuid())

  title      String
  previewUrl String? @map("preview_url")

  ingressId String? @unique @map("ingress_id")
  serverUrl String? @map("server_id")
  streamKey String? @map("stream_key")

  isLive Boolean @default(false) @map("is_live")

  messages Message[]

  chatSettings ChatSettings?

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @unique @map("user_id")

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @map("category_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("streams")
}

model ChatSettings {
  id String @id @default(uuid())

  isChatEnabled         Boolean @default(true) @map("is_chat_enabled")
  isChatFollowersOnly   Boolean @default(false) @map("is_chat_followers_only")
  isChatSubscribersOnly Boolean @default(false) @map("is_chat_subscribers_only")

  stream   Stream @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId String @unique @map("stream_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("chats_settings")
}

model Notification {
  id String @id @default(uuid())

  message String
  type    NotificationType
  isRead  Boolean          @default(false) @map("is_read")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("notifications")
}

model NotificationSettings {
  id String @id @default(uuid())

  siteNotificationsEnable     Boolean @default(true) @map("site_notifications_enable")
  telegramNotificationsEnable Boolean @default(true) @map("telegram_notifications_enable")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("notification_settings")
}

model Message {
  id String @id @default(uuid())

  text String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @map("user_id")

  stream   Stream? @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId String? @map("stream_id")

  @@map("messages")
}

model Follow {
  id String @id @default(uuid())

  follower   User   @relation(name: "followings", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String @map("follower_id")

  following   User   @relation(name: "followers", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String @map("following_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@map("follows")
}

model Category {
  id String @id @default(uuid())

  title       String
  slug        String  @unique
  description String?
  previewUrl  String  @map("preview_url")

  streams Stream[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("categories")
}

model Token {
  id String @id @default(uuid())

  token     String    @unique
  type      TokenType
  expiresIn DateTime  @map("expires_in")

  additionalData Json? @default("{}") @map("additional_data")

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("tokens")
}

model Post {
  id       String  @id @default(uuid())
  content  String
  imageUrl String? @map("image_url")

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String @map("author_id")

  likes    Like[]
  comments Comment[]

  isPublic Boolean @default(true) @map("is_public")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("posts")
}

model Comment {
  id      String @id @default(uuid())
  content String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String @map("post_id")

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String @map("author_id")

  likes Like[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("comments")
}

model Like {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String? @map("post_id")

  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String?  @map("comment_id")

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([userId, postId])
  @@unique([userId, commentId])
  @@map("likes")
}

model PrivateChat {
  id String @id @default(uuid())

  creator   User   @relation("ChatCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String @map("creator_id")

  recipient   User   @relation("ChatRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
  recipientId String @map("recipient_id")

  messages PrivateMessage[]

  status ChatStatus @default(PENDING)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("private_chats")
}

model PrivateMessage {
  id      String @id @default(uuid())
  content String

  chat   PrivateChat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId String      @map("chat_id")

  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId String @map("sender_id")

  isRead Boolean @default(false) @map("is_read")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("private_messages")
}

enum UserRole {
  REGULAR
  ADMIN
}

enum NotificationType {
  STREAM_START
  NEW_FOLLOWER
  ENABLE_TWO_FACTOR

  @@map("notification_types")
}

enum TokenType {
  EMAIL_VERIFY
  PASSWORD_RESET
  EMAIL_CHANGE
  EMAIL_CHANGE_CONFIRM
  TELEGRAM_AUTHENTICATION

  @@map("token_types")
}

enum ChatStatus {
  PENDING
  ACCEPTED
  REJECTED
}
