version: '3.7'

services:
    db:
        container_name: postgres
        image: postgres:15.2
        restart: always
        environment:
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        ports:
            - 5433:5432
        volumes:
            - postgres_data:/var/lib/postgresql/data
        networks:
            - streaming-backend
    redis:
        container_name: redis
        image: redis:7.4.2
        restart: always
        ports:
            - 6379:6379
        command: redis-server --requirepass ${REDIS_PASSWORD}
        volumes:
            - redis_data:/data
        networks:
            - streaming-backend
    minio:
        image: quay.io/minio/minio
        container_name: minio
        ports:
            - '9000:9000'
            - '9001:9001'
        volumes:
            - ../media:/data
        environment:
            MINIO_ROOT_USER: ${MINIO_ROOT_USER}
            MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
        command: server /data --console-address ":9001"

    minio-console:
        depends_on:
            - minio
        image: quay.io/minio/mc
        container_name: minio-console
        entrypoint: /bin/sh
        command: -c "
            sleep 15;
            mc alias set myminio http://minio:9000 $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD;
            mc mb --ignore-existing myminio/nokurami-records;
            mc anonymous set public myminio/nokurami-records;
            while true; do sleep 30; done;"
        environment:
            MINIO_ROOT_USER: ${MINIO_ROOT_USER}
            MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}

    # ngrok:
    #     image: ngrok/ngrok:latest
    #     container_name: ngrok
    #     command: start --all --config /ngrok.yml
    #     volumes:
    #         - ./ngrok.yml:/ngrok.yml
    #     environment:
    #         - NGROK_AUTH_TOKEN=${NGROK_AUTH_TOKEN}
    #     depends_on:
    #         - livekit
    #         - ingress
    #     networks:
    #         - streaming-backend

    # livekit:
    #     image: livekit/livekit-server:latest
    #     container_name: livekit
    #     command: --config /etc/livekit.yaml
    #     ports:
    #         - '7880:7880' # WebSocket
    #         - '7881:7881' # HTTP
    #         - '10000-10100:10000-10100/udp' # WebRTC
    #     volumes:
    #         - ./livekit.yaml:/etc/livekit.yaml
    #     depends_on:
    #         - redis
    #     networks:
    #         - streaming-backend

    # ingress:
    # image: livekit/ingress:latest
    # container_name: ingress
    # command: --config /etc/ingress.yaml
    # ports:
    #     - '1935:1935' # RTMP
    #     - '8081:8081' # WHIP (переназначен с 8080)
    # volumes:
    #     - ./ingress.yaml:/etc/ingress.yaml
    # depends_on:
    #     - redis
    #     - livekit
    # networks:
    #     - streaming-backend
volumes:
    postgres_data:
    redis_data:

networks:
    streaming-backend:
