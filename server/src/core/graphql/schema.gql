# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthModel {
  message: String
  user: UserModel
}

type CategoryModel {
  createdAt: DateTime!
  description: String!
  id: ID!
  previewUrl: String!
  slug: String!
  streams: [StreamModel!]!
  title: String!
  updatedAt: DateTime!
}

input ChangeChatSettingsInput {
  isChatEnabled: Boolean!
  isChatFollowersOnly: Boolean!
}

input ChangeEmailInput {
  token: String!
}

input ChangeNotificationsSettingsInput {
  siteNotificationsEnable: Boolean!
  telegramNotificationsEnable: Boolean!
}

type ChangeNotificationsSettingsResponse {
  notificationSettings: NotificationSettingsModel!
  telegramToken: String
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

input ChangeProfileInfoInput {
  displayName: String!
  information: String!
  username: String!
}

input ChangeStreamInfoInput {
  categoryId: String!
  title: String!
}

type ChatSettingsModel {
  createdAt: DateTime!
  id: ID!
  isChatEnabled: Boolean!
  isChatFollowersOnly: Boolean!
  isChatSubscribersOnly: Boolean!
  streamId: String!
  updatedAt: DateTime!
}

"""Status of a private chat"""
enum ChatStatus {
  ACCEPTED
  PENDING
  REJECTED
}

type CommentModel {
  author: UserModel!
  authorId: String!
  content: String!
  createdAt: DateTime!
  id: ID!
  likeCount: Float
  likes: [LikeModel!]
  post: PostModel!
  postId: String!
  updatedAt: DateTime!
}

input ConfirmChangedEmailInput {
  newEmail: String!
  token: String!
}

input CreateCommentInput {
  content: String!
  postId: ID!
}

input CreatePostInput {
  content: String!
  imageUrl: String
  isPublic: Boolean! = true
}

input CreateUserInput {
  email: String!
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DeviceModel {
  browser: String!
  os: String!
  type: String!
}

input Enable2FAInput {
  pin: String!
  secret: String!
}

input FiltersInput {
  searchKey: String
  skip: Float
  take: Float
}

input FindFollowersInput {
  orderBy: FollowOrderByInput
  search: String
  skip: Int
  take: Int
}

type FollowModel {
  createdAt: DateTime!
  follower: UserModel!
  followerId: String!
  following: UserModel!
  followingId: String!
  id: ID!
  updatedAt: DateTime!
}

input FollowOrderByInput {
  createdAt: SortOrder
  username: SortOrder
}

type FollowersResponse {
  followers: [FollowModel!]!
  totalCount: Int!
}

type FollowingsResponse {
  followings: [FollowModel!]!
  totalCount: Int!
}

input GenerateStreamTokenInput {
  channelId: String!
  userId: String!
}

type GenerateStreamTokenModel {
  token: String!
}

type LikeModel {
  comment: CommentModel
  commentId: String
  createdAt: DateTime!
  id: ID!
  post: PostModel
  postId: String
  user: UserModel!
  userId: String!
}

type LocationModel {
  city: String!
  country: String!
  latitude: String!
  longitude: String!
}

input LoginInput {
  login: String!
  password: String!
  pin: String
}

input MarkMessagesAsReadInput {
  chatId: ID!
}

type MarkMessagesAsReadResponse {
  count: Float!
  success: Boolean!
}

type MessageModel {
  createdAt: DateTime!
  id: ID!
  stream: StreamModel!
  streamId: String!
  text: String!
  updatedAt: DateTime!
  user: UserModel!
  userId: String!
}

type Mutation {
  changeChatSettings(data: ChangeChatSettingsInput!): Boolean!
  changeEmail(data: ChangeEmailInput!): Boolean!
  changeNotificationSettings(data: ChangeNotificationsSettingsInput!): ChangeNotificationsSettingsResponse!
  changePassword(data: ChangePasswordInput!): Boolean!
  changeProfileAvatar(avatar: Upload!): Boolean!
  changeProfileInfo(data: ChangeProfileInfoInput!): Boolean!
  changeStreamInfo(data: ChangeStreamInfoInput!): Boolean!
  changeStreamPreview(preview: Upload!): Boolean!
  clearSessionFromCookie: Boolean!
  confirmChangedEmail(data: ConfirmChangedEmailInput!): Boolean!
  createComment(input: CreateCommentInput!): CommentModel!
  createIngress(ingressType: Float!): Boolean!
  createPost(input: CreatePostInput!): PostModel!
  createSocialLink(data: SocialLinkInput!): Boolean!
  createUser(data: CreateUserInput!): Boolean!
  deleteComment(id: String!): Boolean!
  deletePost(id: String!): Boolean!
  disable2FA: Boolean!
  enable2FA(data: Enable2FAInput!): Boolean!
  followToChannel(channelId: String!): Boolean!
  generateStreamToken(data: GenerateStreamTokenInput!): GenerateStreamTokenModel!
  login(data: LoginInput!): AuthModel!
  logout: Boolean!
  markMessagesAsRead(input: MarkMessagesAsReadInput!): MarkMessagesAsReadResponse!
  new_password(data: NewPasswordInput!): Boolean!
  removeProfileAvatar: Boolean!
  removeSession(id: String!): Boolean!
  removeSocialLink(id: String!): Boolean!
  removeStreamPreview: Boolean!
  reorderSocialLinks(list: [SocialLinkOrderInput!]!): Boolean!
  requestChat(input: RequestChatInput!): PrivateChatModel!
  requestToEmailChange: Boolean!
  reset_password(data: ResetPasswordInput!): Boolean!
  sendMessage(data: SendMessageInput!): MessageModel!
  sendPrivateMessage(input: SendPrivateMessageInput!): PrivateMessageModel!
  toggleLike(input: ToggleLikeInput!): Boolean!
  unfollowFromChannel(channelId: String!): Boolean!
  updateChatStatus(input: UpdateChatStatusInput!): PrivateChatModel!
  updateComment(input: UpdateCommentInput!): CommentModel!
  updatePost(input: UpdatePostInput!): PostModel!
  updateSocialLink(data: SocialLinkInput!, id: String!): Boolean!
  verifyAccount(data: VerificationInput!): AuthModel!
}

input NewPasswordInput {
  confirmPassword: String!
  newPassword: String!
  token: String!
}

type NotificationModel {
  createdAt: DateTime!
  id: String!
  isRead: Boolean!
  message: String!
  type: NotificationType!
  updatedAt: DateTime!
  user: UserModel!
  userId: String!
}

type NotificationSettingsModel {
  createdAt: DateTime!
  id: String!
  siteNotificationsEnable: Boolean!
  telegramNotificationsEnable: Boolean!
  updatedAt: DateTime!
  user: UserModel!
  userId: String!
}

enum NotificationType {
  ENABLE_TWO_FACTOR
  NEW_FOLLOWER
  STREAM_START
}

input PostFiltersInput {
  followingOnly: Boolean
  searchTerm: String
  userId: String
}

type PostModel {
  author: UserModel!
  authorId: String!
  commentCount: Float
  comments: [CommentModel!]
  content: String!
  createdAt: DateTime!
  id: ID!
  imageUrl: String
  isPublic: Boolean!
  likeCount: Float
  likes: [LikeModel!]
  updatedAt: DateTime!
}

input PostSortInput {
  latestFirst: Boolean
  mostCommented: Boolean
  mostLiked: Boolean
}

type PrivateChatModel {
  createdAt: DateTime!
  creator: UserModel!
  creatorId: String!
  id: ID!
  messages: [PrivateMessageModel!]
  recipient: UserModel!
  recipientId: String!
  status: ChatStatus!
  unreadCount: Float
  updatedAt: DateTime!
}

type PrivateMessageModel {
  chat: PrivateChatModel!
  chatId: String!
  content: String!
  createdAt: DateTime!
  id: ID!
  isRead: Boolean!
  sender: UserModel!
  senderId: String!
  updatedAt: DateTime!
}

type Query {
  findAllCategories: [CategoryModel!]!
  findAllLiveStreams(filters: FiltersInput!): [StreamModel!]!
  findAllStreams(filters: FiltersInput!): [StreamModel!]!
  findCategoryBySlug(slug: String!): CategoryModel!
  findChannelByUsername(username: String!): UserModel!
  findChannelsContainingUsername(username: String!): [UserModel!]!
  findFollowersCountByChannel(channelId: String!): Float!
  findFollowingsCountByChannel(channelId: String!): Float!
  findMessagesByStream(streamId: String!): [MessageModel!]!
  findMyFollowers(data: FindFollowersInput): FollowersResponse!
  findMyFollowings(data: FindFollowersInput): FollowingsResponse!
  findNotificationsByUserId: [NotificationModel!]!
  findPostById(id: String!): PostModel!
  findPosts(filters: PostFiltersInput, skip: Float, sort: PostSortInput, take: Float): [PostModel!]!
  findRandomCategories: [CategoryModel!]!
  findRandomStreams: [StreamModel!]!
  findRecommendedChannels: [UserModel!]!
  findSocialLinks: [SocialLinkModel!]!
  findStreamById(id: String!): StreamModel!
  findUnreadNotificationsCount: Float!
  generateTotpSecret: TotpModel!
  getAllSessions: [SessionModel!]!
  getCurrentSession: SessionModel!
  getProfile: UserModel!
  getSessionsByUser: [SessionModel!]!
  privateChat(id: String!): PrivateChatModel!
  privateChats: [PrivateChatModel!]!
}

input RequestChatInput {
  recipientId: ID!
}

input ResetPasswordInput {
  email: String!
}

input SendMessageInput {
  streamId: String!
  text: String!
}

input SendPrivateMessageInput {
  chatId: ID!
  content: String!
}

type SessionMetadataModel {
  device: DeviceModel!
  ip: String!
  location: LocationModel!
}

type SessionModel {
  createdAt: String!
  id: ID!
  metadata: SessionMetadataModel!
  userId: String!
}

input SocialLinkInput {
  title: String!
  url: String!
}

type SocialLinkModel {
  createdAt: DateTime!
  id: ID!
  position: Float!
  title: String!
  updatedAt: DateTime!
  url: String!
  userId: String!
}

input SocialLinkOrderInput {
  id: String!
  position: Float!
}

"""Order direction (ascending or descending)"""
enum SortOrder {
  asc
  desc
}

type StreamModel {
  category: CategoryModel!
  categoryId: String!
  chatSettings: ChatSettingsModel
  createdAt: DateTime!
  id: ID!
  ingressId: String
  isLive: Boolean!
  previewUrl: String
  serverUrl: String
  streamKey: String
  title: String!
  updatedAt: DateTime!
  user: UserModel!
  userId: String!
}

type Subscription {
  chatRequested: PrivateChatModel!
  chatStatusUpdated: PrivateChatModel!
  commentCreated: CommentModel!
  newMessageAdded(streamId: String!): MessageModel!
  newNotificationAdded(userId: String!): NotificationModel!
  onChatMessage(chatId: String!, userId: String!): PrivateMessageModel!
  postCreated: PostModel!
  privateMessageSent: PrivateMessageModel!
}

input ToggleLikeInput {
  commentId: ID
  postId: ID
}

type TotpModel {
  qrcodeUrl: String!
  secret: String!
}

input UpdateChatStatusInput {
  chatId: ID!
  status: ChatStatus!
}

input UpdateCommentInput {
  content: String!
  id: ID!
}

input UpdatePostInput {
  content: String
  id: ID!
  imageUrl: String
  isPublic: Boolean
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UserModel {
  avatar: String
  createdAt: DateTime!
  displayName: String!
  email: String!
  followers: [FollowModel!]!
  followings: [FollowModel!]!
  id: ID!
  information: String
  notificationSettings: NotificationSettingsModel!
  notifications: [NotificationModel!]!
  password: String!
  role: UserRole!
  socialLinks: [SocialLinkModel!]!
  stream: StreamModel!
  telegramChatId: String
  updatedAt: DateTime!
  userSecurity: UserSecurityModel!
  username: String!
}

enum UserRole {
  ADMIN
  REGULAR
}

type UserSecurityModel {
  createdAt: DateTime!
  id: ID!
  isEmailVerified: Boolean!
  isTwoFAEnabled: Boolean!
  twoFASecret: String!
  updatedAt: DateTime!
  userId: String!
}

input VerificationInput {
  token: String!
}